#!/usr/bin/env python3

import argparse
import os
import re
import sys
from dataclasses import asdict, dataclass, field
from pathlib import Path

from bson.objectid import ObjectId
from gridfs import GridFS
from pymongo import MongoClient
from pymongo.database import Database

MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:30017/music")


@dataclass
class Score:
    _id: ObjectId = field(default_factory=ObjectId)
    simple_name: str | None = None
    title: str | None = None
    composer: str | None = None
    time: list[str] = field(default_factory=list)
    key: list[str] = field(default_factory=list)
    subtitle: str | None = None
    engraving_id: ObjectId | None = None


def _get_score_metadata(path: Path) -> Score:
    if not path.is_dir():
        raise ValueError(f"{path} is not a directory")

    score = Score()
    score.simple_name = path.stem
    metadata_re = re.compile(r"\s+\\?(title|subtitle|composer|time|key)(\s+=)?\s+(.*)")
    files = list(path.glob("**/*.ly"))

    if not files:
        raise ValueError(f"No Lilypond source files found in '{path}'")

    for file in files:
        with open(file, "r") as src:
            for line in src:
                match = metadata_re.match(line)

                if match:
                    k = match.group(1)
                    v = match.group(3).strip().strip("'\"")

                    if isinstance(getattr(score, k), list):
                        getattr(score, k).append(v)
                    else:
                        setattr(score, k, v)

    score.key = [k.replace("\\", "").title() for k in score.key]

    return score


def _get_engraving(
    engraving_file: Path, fs: GridFS, overwrite: bool = False
) -> ObjectId:
    if not engraving_file.exists() or not engraving_file.is_file():
        raise ValueError(f"'{engraving_file}' does not exist or is not a file")

    existing_file = fs.find_one({"filename": engraving_file.name})

    if existing_file and not overwrite:
        return existing_file._id

    if existing_file and overwrite:
        fs.delete(existing_file._id)

    data = engraving_file.read_bytes()
    engraving_id = fs.put(data, filename=engraving_file.name)

    return engraving_id


def get_score_data(path: Path, fs: GridFS) -> Score:
    score = _get_score_metadata(path)
    engraving_file = (
        path.parent.parent / "engravings" / f"{score.title or 'unknown'}.pdf"
    )
    score.engraving_id = _get_engraving(engraving_file, fs)

    return score


def commit_scores(score_sources: list[Path], db: Database) -> None:
    fs = GridFS(db)
    scores = list()

    for src_dir in score_sources:
        score = get_score_data(src_dir, fs)

        scores.append(asdict(score))

    for score in scores:  # type: ignore[assignment]
        db.scores.update_one(
            {"simple_name": score["simple_name"]},  # type: ignore[index]
            {"$set": score},
            upsert=True,
        )


def update_score(path: Path, db: Database) -> None:
    query = {"simple_name": path.stem}
    score = db.scores.find_one(query)

    if not score:
        raise ValueError(f"No score with simple_name '{path.stem}' found")

    engraving_file = (
        path.parent.parent / "engravings" / f"{score.title or 'unknown'}.pdf"
    )
    fs = GridFS(db)
    new_engraving_id = _get_engraving(engraving_file, fs, overwrite=True)
    result = db.scores.update_one(query, {"$set": {"engraving_id": new_engraving_id}})

    if result.modified_count < 1:
        raise RuntimeError("No update took place; please review your data")


def get_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()

    parser.add_argument("path", nargs="?", help="Path to directory containing score")
    parser.add_argument(
        "-u",
        "--update",
        action="store_true",
        help="Update engraving of a pre-existing score",
    )
    parser.add_argument(
        "-d", "--score-dir", help="Path to directory containing multiple scores"
    )

    return parser


def main() -> None:
    parser = get_parser()
    args = parser.parse_args()
    path = Path(args.path) if args.path else None
    update = args.update
    score_repo = Path(args.score_dir) if args.score_dir else None

    if path is None and score_repo is None:  # style here is to appease mypy
        sys.exit("Either 'path' or '--score-dir' must be provided")

    if path and score_repo:
        sys.exit("Only one of 'path' or '--score-dir' should be provided")

    if update and score_repo:
        sys.exit("Only updating a single score is supported")

    client: MongoClient = MongoClient(MONGO_URI)
    db = client.get_database()

    score_sources = (
        [path]
        if path is not None
        else [d for d in score_repo.iterdir() if d.stem != "with-fingering"]
        if score_repo is not None
        else []
    )

    try:
        if update:
            update_score(score_sources[0], db)
        else:
            commit_scores(score_sources, db)
    finally:
        client.close()


if __name__ == "__main__":
    main()
